#include "ConfigManager.h"
#include <sstream>
#include <algorithm>
#include <filesystem>

ConfigManager::ConfigManager() : configLoaded(false) {
}

ConfigManager::~ConfigManager() {
    if (configLoaded) {
        saveConfig();
    }
}

void ConfigManager::initialize(const std::string& configPath) {
    configFilePath = configPath;
    
    // Create config directory if it doesn't exist
    std::filesystem::path configDir = std::filesystem::path(configPath).parent_path();
    if (!configDir.empty() && !std::filesystem::exists(configDir)) {
        try {
            std::filesystem::create_directories(configDir);
            spdlog::info("Created config directory: {}", configDir.string());
        } catch (const std::exception& e) {
            spdlog::warn("Failed to create config directory: {}", e.what());
        }
    }
    
    loadConfig();
}

bool ConfigManager::loadConfig() {
    configData.clear();
    configLoaded = false;

    std::ifstream file(configFilePath);
    if (!file.is_open()) {
        spdlog::info("Config file not found, will create new one: {}", configFilePath);
        configLoaded = true; // We'll create it when we save
        return true;
    }

    std::string line;
    while (std::getline(file, line)) {
        // Remove comments (lines starting with #)
        size_t commentPos = line.find('#');
        if (commentPos != std::string::npos) {
            line = line.substr(0, commentPos);
        }

        // Trim whitespace
        line.erase(0, line.find_first_not_of(" \t\r\n"));
        line.erase(line.find_last_not_of(" \t\r\n") + 1);

        // Skip empty lines
        if (line.empty()) {
            continue;
        }

        // Parse key=value pairs
        size_t equalPos = line.find('=');
        if (equalPos != std::string::npos) {
            std::string key = line.substr(0, equalPos);
            std::string value = line.substr(equalPos + 1);

            // Trim key and value
            key.erase(0, key.find_first_not_of(" \t\r\n"));
            key.erase(key.find_last_not_of(" \t\r\n") + 1);
            value.erase(0, value.find_first_not_of(" \t\r\n"));
            value.erase(value.find_last_not_of(" \t\r\n") + 1);

            configData[key] = value;
            spdlog::debug("Loaded config: {} = {}", key, value);
        }
    }

    file.close();
    configLoaded = true;
    spdlog::info("Loaded {} config entries from: {}", configData.size(), configFilePath);
    return true;
}

bool ConfigManager::saveConfig() {
    if (!configLoaded) {
        spdlog::error("Cannot save config: config not loaded");
        return false;
    }

    std::ofstream file(configFilePath);
    if (!file.is_open()) {
        spdlog::error("Failed to open config file for writing: {}", configFilePath);
        return false;
    }

    // Write header comment
    file << "# Ortos II Game Configuration File\n";
    file << "# This file is automatically generated and managed by the game\n";
    file << "# Do not edit manually unless you know what you're doing\n\n";

    // Write all config entries
    for (const auto& pair : configData) {
        file << pair.first << " = " << pair.second << "\n";
    }

    file.close();
    spdlog::info("Saved {} config entries to: {}", configData.size(), configFilePath);
    return true;
}

std::string ConfigManager::getString(const std::string& key, const std::string& defaultValue) {
    auto it = configData.find(key);
    if (it != configData.end()) {
        return it->second;
    }
    return defaultValue;
}

float ConfigManager::getFloat(const std::string& key, float defaultValue) {
    auto it = configData.find(key);
    if (it != configData.end()) {
        try {
            return std::stof(it->second);
        } catch (const std::exception& e) {
            spdlog::warn("Failed to parse float value for key '{}': {}", key, e.what());
        }
    }
    return defaultValue;
}

int ConfigManager::getInt(const std::string& key, int defaultValue) {
    auto it = configData.find(key);
    if (it != configData.end()) {
        try {
            return std::stoi(it->second);
        } catch (const std::exception& e) {
            spdlog::warn("Failed to parse int value for key '{}': {}", key, e.what());
        }
    }
    return defaultValue;
}

bool ConfigManager::getBool(const std::string& key, bool defaultValue) {
    auto it = configData.find(key);
    if (it != configData.end()) {
        std::string value = it->second;
        std::transform(value.begin(), value.end(), value.begin(), ::tolower);
        
        if (value == "true" || value == "1" || value == "yes" || value == "on") {
            return true;
        } else if (value == "false" || value == "0" || value == "no" || value == "off") {
            return false;
        } else {
            spdlog::warn("Invalid bool value for key '{}': {}", key, it->second);
        }
    }
    return defaultValue;
}

void ConfigManager::setString(const std::string& key, const std::string& value) {
    configData[key] = value;
    spdlog::debug("Set config: {} = {}", key, value);
}

void ConfigManager::setFloat(const std::string& key, float value) {
    configData[key] = std::to_string(value);
    spdlog::debug("Set config: {} = {}", key, value);
}

void ConfigManager::setInt(const std::string& key, int value) {
    configData[key] = std::to_string(value);
    spdlog::debug("Set config: {} = {}", key, value);
}

void ConfigManager::setBool(const std::string& key, bool value) {
    configData[key] = value ? "true" : "false";
    spdlog::debug("Set config: {} = {}", key, value);
}
